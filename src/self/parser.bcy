mod tokenizer;

fn parse_error(tk, msg) {
    print("token info = ");
    printv(tk.info);
    println(";");
    error(msg);
}

fn __next_basic_expr(tok) {}

fn __next_basic_stmt(tok) {}

fn next_expr(tok, no_op) {
    let x = __next_basic_expr(tok);
    loop {
        let t = tokenizer::peek(tok);
        if t.t == "op" {
            if no_op return x;
            tokenizer::next(tok);
            return { t: "bop", left: x, right: next_expr(tok) };
        } else if t.t == "sym" {
            if t.sym == "(" {
                tokenizer::next(tok);
                let args = [];
                t = tokenizer::peek(tok);
                if ! (t.t == "sym" && t.sym == ")") {
                    loop {
                        list::append(args, next_expr(tok));
                        t = tokenizer::next(tok);
                        if t.t == "sym" {
                            if t.sym == "," continue
                            else if t.sym == ")" break;
                        };
                        parse_error(t, "expected either a comma or closing paren in fn call");
                        break;
                    }
                } else tokenizer::next(tok);
                x = { t: "call", func: x, args: args };
            } else if t.sym == "[" {
                tokenizer::next(tok);
                let ix = next_expr(tok);
                t = tokenizer::next(tok);
                if ! (t.t == "sym" && t.sym == "]") {
                    parse_error(t, "expected closing square bracket for index");
                };
                x = { t: "index", val: x, ix: ix };
            } else break;
        } else break;
    }
}

fn next_stmt(tok) {
    let s = __next_basic_stmt(tok);
    let t = tokenizer::peek(tok);
    if t.t == "sym" && t.sym == ";" {
        tokenizer::next(tok);
        let nxs = nil;
        t = tokenizer::peek(tok);
        if t.t != "eof" && ! (t.t == "sym" && t.sym == "}" || t.sym == ";")
            nxs = next_stmt(tok);
        return { t: "seq", fst: s, sec: nxs };
    };
    return s;
}
